AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates a VPC infrastructure for Anchel in multi-AZ, multi-tier
             deployment of a Linux based Application infrastructure. It will deploy a
             bastion, managed NAT gateways into the public subnet for each Availability Zone,
             LoadBalancer, Auto-scaling, and anchel services with ECS.
             **WARNING** This template creates Amazon EC2 instance and related resources.
             You will be billed for the AWS resources used if you create a stack from this template.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - AvailabilityZones
          - VPCCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1ACIDR
          - PrivateSubnet1BCIDR
          - PrivateSubnet2ACIDR
          - PrivateSubnet2BCIDR
          - RemoteAccessCIDR
          - VPCTenancy
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
          - AMIImageId
          - BastionAMIOS
          - BastionInstanceType
      - Label:
          default: Linux Bastion Configuration
        Parameters:
          - NumBastionHosts
          - BastionTenancy
          - EnableBanner
          - BastionBanner
          - EnableTCPForwarding
          - EnableX11Forwarding
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix

FrontEndLC
      InstanceMonitoring:
        default:
      InstanceType:
        default:
      ClusterName:
        default:

FrontEndASG
      Cooldown:
        default:
      DesiredCapacity:
        default:
      MinSize:
        default:
      MaxSize:
        default:
      HealthCheckGracePeriod:
        default:
      HealthCheckType:
        default:
      ClusterName:
        default:
      AppSubnetId:
        default:

FrontEndEC2SecurityGroup & FrontEndALBSecurityGroup
      ProjectName:
        default:

    ParameterLabels:
      AvailabilityZones:
        default: Availability Zones
      AMIImageId:
        default: EC2 AMI Operating System
      BastionAMIOS:
        default: Bastion AMI Operating System
      BastionTenancy:
        default: Bastion Tenancy
      BastionBanner:
        default: Bastion Banner
      BastionInstanceType:
        default: Bastion Instance Type
      EnableBanner:
        default: Enable Banner
      EnableTCPForwarding:
        default: Enable TCP Forwarding
      EnableX11Forwarding:
        default: Enable X11 Forwarding
      KeyPairName:
        default: Key Pair Name
      NumBastionHosts:
        default: Number of Bastion Hosts
      PublicSubnet1CIDR:
        default: Public Subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public Subnet 2 CIDR
      PrivateSubnet1ACIDR:
        default: Private Subnet 1A CIDR
      PrivateSubnet1BCIDR:
        default: Private Subnet 1B CIDR
      PrivateSubnet2ACIDR:
        default: Private Subnet 2A CIDR
      PrivateSubnet2BCIDR:
        default: Private Subnet 2B CIDR
      VPCTenancy:
        default: VPC Tenancy
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      RemoteAccessCIDR:
        default: Allowed Bastion External Access CIDR
      VPCCIDR:
        default: VPC CIDR
Parameters:
  AvailabilityZones:
    Description: >-
      List of Availability Zones to use for the subnets in the VPC. Note: The
      logical order is preserved and only 2 AZs are used for this deployment.
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
  AMIImageId:
    AllowedValues:
      - Amazon-Linux-HVM
      - CentOS-7-HVM
      - Ubuntu-Server-14.04-LTS-HVM
      - Ubuntu-Server-16.04-LTS-HVM
    Default: Amazon-Linux-HVM
    Description: The Linux distribution for the AMI to be used for the bastion instances
    Type: String
  BastionAMIOS:
    AllowedValues:
      - Amazon-Linux-HVM
      - CentOS-7-HVM
      - Ubuntu-Server-14.04-LTS-HVM
      - Ubuntu-Server-16.04-LTS-HVM
    Default: Amazon-Linux-HVM
    Description: The Linux distribution for the AMI to be used for the bastion instances
    Type: String
  BastionBanner:
    Default: >-
      https://anchel-quickstart.s3.amazonaws.com/quickstart-anchel/scripts/banner_message.txt
    Description: Banner text to display upon login
    Type: String
  BastionTenancy:
    Description: 'VPC Tenancy to launch the bastion in. Options: ''dedicated'' or ''default'''
    Type: String
    Default: default
    AllowedValues:
      - dedicated
      - default
  BastionInstanceType:
    Description: Amazon EC2 instance type for the bastion instances
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
  EnableBanner:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: >-
      To include a banner to be displayed when connecting via SSH to the
      bastion, set this parameter to true
    Type: String
  EnableTCPForwarding:
    Type: String
    Description: Enable/Disable TCP Forwarding
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  EnableX11Forwarding:
    Type: String
    Description: Enable/Disable X11 Forwarding
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  KeyPairName:
    Description: >-
      Public/private key pairs allow you to securely connect to your instance
      after it launches
    Type: 'AWS::EC2::KeyPair::KeyName'
  NumBastionHosts:
    AllowedValues:
      - '1'
      - '2'
      - '3'
      - '4'
    Default: '1'
    Description: Enter the number of bastion hosts to create
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.1.0/26
    Description: CIDR Block for the public DMZ subnet 1 located in Availability Zone 1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.2.0/26
    Description: CIDR Block for the public DMZ subnet 2 located in Availability Zone 2
    Type: String
  PrivateSubnet1ACIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.12.0/26
    Description: CIDR block for private subnet 1A located in Availability Zone 1
    Type: String
  PrivateSubnet1BCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.13.0/26
    Description: CIDR block for private subnet 1B located in Availability Zone 2
    Type: String
  PrivateSubnet2ACIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.21.0/26
    Description: CIDR block for private subnet 2A located in Availability Zone 1
    Type: String
  PrivateSubnet2BCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.22.0/26
    Description: CIDR block for private subnet 2B located in Availability Zone 2
    Type: String
  VPCTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: anchel-quickstart
    Description: >-
      S3 bucket name for the Quick Start assets. Quick Start bucket name can
      include numbers, lowercase letters, uppercase letters, and hyphens (-). It
      cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: quickstart-anchel
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for external SSH access to the bastions
    Type: String
  VPCCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR Block for the VPC
    Type: String
Conditions:
  GovCloudCondition:
    'Fn::Equals':
      - Ref: 'AWS::Region'
      - us-gov-west-1
Resources:
  404MainLogGroup:
    Type: 'AWS::Logs::LogGroup'
  SSHMetricFilter:
    Type: 'AWS::Logs::MetricFilter'
    Properties:
      LogGroupName:
        Ref: 404MainLogGroup
      FilterPattern: "[ip, identity, user_id, timestamp, request, status_code = 404, size]"
      MetricTransformations:
        - MetricName: "404Count"
          MetricValue: "1"
          MetricNamespace:
            'Fn::Join':
              - /
              - - AWSQuickStart
                - Ref: 'AWS::StackName'
  EC2IAMInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:UpdateContainerInstancesState
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"
          PolicyName: ec2-ecs-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: CloudWatchEventsReadOnlyAccess
              Effect: Allow
              Action:
              - events:DescribeRule
              - events:ListRuleNamesByTarget
              - events:ListRules
              - events:ListTargetsByRule
              - events:TestEventPattern
              - events:DescribeEventBus
              Resource: "*"
          PolicyName: CloudWatchEventsReadOnlyAccess
        - PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - cloudwatch:Describe*
                - ec2:Describe*
                - ec2:RebootInstances
                - ec2:StopInstances
                - ec2:TerminateInstances
                Resource: "*"
          PolicyName: CloudWatchActionsEC2Access
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:GetLogEvents'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutRetentionPolicy'
                  - 'logs:PutMetricFilter'
                  - 'logs:CreateLogGroup'
                Resource:
                  'Fn::Sub':
                    - arn:${Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${404MainLogGroup}:*
                    - Partition:
                        'Fn::If':
                          - GovCloudCondition
                          - aws-us-gov
                          - aws
                Effect: Allow
          PolicyName: ec2-cloudwatch-logs-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:Get*
              - s3:List*
              Resource: "*"
          PolicyName: ec2-quick-start-s3-read-only-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ecr:*
              - cloudtrail:LookupEvents
              Resource: "*"
          PolicyName: aws-quick-start-ecr-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:PutMetricFilter
              - logs:PutRetentionPolicy
              Resource:
              - "*"
          PolicyName: aws-sns-role
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'
  EC2IAMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - Ref: EC2IAMInstanceRole
      Path: /

  VPCStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - >-
            https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/aws-vpc.yaml
          - QSS3Region:
              'Fn::If':
                - GovCloudCondition
                - s3-us-gov-west-1
                - s3
      Parameters:
        AvailabilityZones:
          'Fn::Join':
            - ','
            - Ref: AvailabilityZones
        KeyPairName: !Ref KeyPairName
        CreatePublicSubnet1:      'true'
        CreatePublicSubnet2:      'true'
        CreatePrivateSubnet1A:    'true'
        CreatePrivateSubnet1B:    'true'
        CreatePrivateSubnet2A:    'true'
        CreatePrivateSubnet2B:    'true'
        PublicSubnet1CIDR:        !Ref PublicSubnet1CIDR
        PublicSubnet2CIDR:        !Ref PublicSubnet2CIDR
        PrivateSubnet1ACIDR:      !Ref PrivateSubnet1ACIDR
        PrivateSubnet1BCIDR:      !Ref PrivateSubnet1BCIDR
        PrivateSubnet2ACIDR:      !Ref PrivateSubnet2ACIDR
        PrivateSubnet2BCIDR:      !Ref PrivateSubnet2BCIDR
        VPCCIDR: !Ref VPCCIDR
        VPCTenancy: !Ref VPCTenancy
  BastionStack:
    DependsOn: VPCStack
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - >-
            https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/linux-bastion.yaml
          - QSS3Region:
              'Fn::If':
                - GovCloudCondition
                - s3-us-gov-west-1
                - s3
      Parameters:
        BastionAMIOS:         !Ref BastionAMIOS
        BastionBanner:        !Ref BastionBanner
        BastionInstanceType:  !Ref BastionInstanceType
        BastionTenancy:        'default'
        EnableBanner:         true
        EnableTCPForwarding:  false
        EnableX11Forwarding:  false
        KeyPairName:          !Ref KeyPairName
        NumBastionHosts:      2
        PublicSubnet1ID:      !GetAtt VPCStack.Outputs.PublicSubnet1ID
        PublicSubnet2ID:      !GetAtt VPCStack.Outputs.PublicSubnet2ID
        QSS3BucketName:       !Ref QSS3BucketName
        QSS3KeyPrefix:        !Ref QSS3KeyPrefix
        RemoteAccessCIDR:     !Ref RemoteAccessCIDR
        VPCID:                !GetAtt VPCStack.Outputs.VPCID

  FrontEndLC:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/services/launch-config.yaml
      Parameters:
          ec2iaminstanceprofile:       !Ref EC2IAMInstanceProfile
          AMIImageId:                  !Ref AMIImageId
          InstanceMonitoring:          !Ref InstanceMonitoring
          InstanceType:                !Ref Ec2InstanceType
          ClusterName:                 !Ref FrontEndClusterName
          SecurityGroup:               !GetAtt FrontEndEC2SecurityGroup.Outputs.SecurityGroup
  FrontEndASG:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/services/autoscaling-group.yaml
      Parameters:
          Cooldown:                      !Ref Cooldown
          DesiredCapacity:               !Ref DesiredCapacity
          MinSize:                       !Ref MinSize
          MaxSize:                       !Ref MaxSize
          HealthCheckGracePeriod:        !Ref HealthCheckGracePeriod
          HealthCheckType:               !Ref HealthCheckType
          ClusterName:                   !Ref FrontEndClusterName
          LaunchConfigurationName:       !GetAtt FrontEndLC.Outputs.LaunchConfiguration
          Subnets:
              'Fn::Join':
                - ','
                - Ref: AppSubnetId

  FrontEndScalingPolicy:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/services/scaling-policies.yaml
      Parameters:
          AutoScalingGroupName:          !GetAtt FrontEndASG.Outputs.AutoScalingGroup
          Cooldown:                      !Ref Cooldown
          ScalingUpAdjustment:           '1'
          ScalingDownAdjustment:         '-1'

  FrontEndEC2SecurityGroup:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/services/security-group.yaml
      Parameters:
        Name: !Sub
            - ${StackName}-FrontEndEC2SecurityGroup
            - StackName: !Ref AWS::StackName
        ProjectName:                       !Ref ProjectName
        VpcId:                             !Ref VPCCIDR
        IpProtocol:                        tcp
        CreateSecurityGroupinboundRule1:   true
        CreateSecurityGroupinboundRule2:   false
        CreateSecurityGroupinboundRule3:   false
        CreateSecurityGroupinboundRule4:   false
        InboundRule1FromPort:              80
        InboundRule1FromPort:              80
        InboundRule1CidrIp:                '0.0.0.0/0'***********
        InboundRule2FromPort:              ''
        InboundRule2FromPort:              ''
        InboundRule2CidrIp:                ''
        InboundRule3FromPort:              ''
        InboundRule3FromPort:              ''
        InboundRule3CidrIp:                ''
        InboundRule4FromPort:              ''
        InboundRule4FromPort:              ''
        InboundRule4CidrIp:                ''

  FrontEndALBSecurityGroup:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/services/security-group.yaml
      Parameters:
        Name: !Sub
            - ${StackName}-FrontEndALBSecurityGroup
            - StackName: !Ref AWS::StackName
        ProjectName:                       !Ref ProjectName
        VpcId:                             !Ref VPCCIDR
        IpProtocol:                        tcp
        CreateSecurityGroupinboundRule1:   true
        CreateSecurityGroupinboundRule2:   false
        CreateSecurityGroupinboundRule3:   false
        CreateSecurityGroupinboundRule4:   false
        InboundRule1FromPort:              80
        InboundRule1FromPort:              80
        InboundRule1CidrIp:                '0.0.0.0/0'
        InboundRule2FromPort:              ''
        InboundRule2FromPort:              ''
        InboundRule2CidrIp:                ''
        InboundRule3FromPort:              ''
        InboundRule3FromPort:              ''
        InboundRule3CidrIp:                ''
        InboundRule4FromPort:              ''
        InboundRule4FromPort:              ''
        InboundRule4CidrIp:                ''

  FrontEndALB:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/services/security-group.yaml
      Parameters:
          Name: !Sub
            - ${StackName}-FrontEndALB
            - StackName: !Ref AWS::StackName
          CreateApplicationLoadBalancer:   true
          LoadBalancerName:                Dev_FrontEnd_ALB
          LoadBalancerType:                application
          Scheme:                          internal
          LoadBalancerSecurityGroup:       !Ref FrontEndALBSecurityGroup
          ProjectName:                     !Ref ProjectName
          CreateALBTargetGroup1:           true
          ALBTargetGroupName1:             frontend
          ALBTargetGroup1Port:             80
          CreateALBListenerRule1:          true
          ALBListenerRule1path:            '/admin'
          CreateALBTargetGroup2:           false
          ALBTargetGroupName2:             ''
          ALBTargetGroup2Port:             ''
          CreateALBListenerRule2:          ''
          ALBListenerRule2path:            ''
          CreateALBTargetGroup3:           false
          ALBTargetGroupName3:             ''
          ALBTargetGroup3Port:             ''
          CreateALBListenerRule3:          ''
          ALBListenerRule3path:            ''
          ALBProtocol:                     HTTP
          VpcId:                           !Ref VpcId
          LoadBalancerSecurityGroup:       !Ref FrontEndALBSecurityGroup
          ALBTG1HealthCheckPath:           '/'
          ALBTG2HealthCheckPath:           ''
          ALBTG3HealthCheckPath:           ''
          HealthCheckProtocol:             HTTP
          HealthCheckPort:                 traffic-port
          HealthyThresholdCount:           2
          UnhealthyThresholdCount:         3
          HealthCheckTimeoutSeconds:       60
          HealthCheckIntervalSeconds:      180
          Matcher:                         200
          SubnetId:
              'Fn::Join':
                - ','
                - Ref: AppSubnetId

  BackEndLC:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/services/launch-config.yaml
      Parameters:
          ec2iaminstanceprofile:       !Ref EC2IAMInstanceProfile
          AMIImageId:                  !Ref AMIImageId
          InstanceMonitoring:          !Ref InstanceMonitoring
          InstanceType:                !Ref Ec2InstanceType
          ClusterName:                 !Ref BackEndClusterName
          SecurityGroup:               !GetAtt BackEndEC2SecurityGroup.Outputs.SecurityGroup
  BackEndASG:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/services/autoscaling-group.yaml
      Parameters:
          Cooldown:                      !Ref Cooldown
          DesiredCapacity:               !Ref DesiredCapacity
          MinSize:                       !Ref MinSize
          MaxSize:                       !Ref MaxSize
          HealthCheckGracePeriod:        !Ref HealthCheckGracePeriod
          HealthCheckType:               !Ref HealthCheckType
          ClusterName:                   !Ref BackEndClusterName
          LaunchConfigurationName:       !GetAtt BackEndLC.Outputs.LaunchConfiguration
          Subnets:
              'Fn::Join':
                - ','
                - Ref: AppSubnetId

  BackEndScalingPolicy:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/services/scaling-policies.yaml
      Parameters:
          AutoScalingGroupName:          !GetAtt BackEndASG.Outputs.AutoScalingGroup
          Cooldown:                      !Ref Cooldown
          ScalingUpAdjustment:           '1'
          ScalingDownAdjustment:         '-1'

  BackEndEC2SecurityGroup:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/services/security-group.yaml
      Parameters:
        Name: !Sub
            - ${StackName}-BackEndEC2SecurityGroup
            - StackName: !Ref AWS::StackName
        ProjectName:                       !Ref ProjectName
        VpcId:                             !Ref VPCCIDR
        IpProtocol:                        tcp
        CreateSecurityGroupinboundRule1:   true
        CreateSecurityGroupinboundRule2:   false
        CreateSecurityGroupinboundRule3:   false
        CreateSecurityGroupinboundRule4:   false
        InboundRule1FromPort:              80
        InboundRule1FromPort:              80
        InboundRule1CidrIp:                '0.0.0.0/0'***********
        InboundRule2FromPort:              ''
        InboundRule2FromPort:              ''
        InboundRule2CidrIp:                ''
        InboundRule3FromPort:              ''
        InboundRule3FromPort:              ''
        InboundRule3CidrIp:                ''
        InboundRule4FromPort:              ''
        InboundRule4FromPort:              ''
        InboundRule4CidrIp:                ''

  BackEndALBSecurityGroup:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/services/security-group.yaml
      Parameters:
        Name: !Sub
            - ${StackName}-BackEndALBSecurityGroup
            - StackName: !Ref AWS::StackName
        ProjectName:                       !Ref ProjectName
        VpcId:                             !Ref VPCCIDR
        IpProtocol:                        tcp
        CreateSecurityGroupinboundRule1:   true
        CreateSecurityGroupinboundRule2:   false
        CreateSecurityGroupinboundRule3:   false
        CreateSecurityGroupinboundRule4:   false
        InboundRule1FromPort:              8080
        InboundRule1FromPort:              8080
        InboundRule1CidrIp:                '0.0.0.0/0'*********
        InboundRule2FromPort:              ''
        InboundRule2FromPort:              ''
        InboundRule2CidrIp:                ''
        InboundRule3FromPort:              ''
        InboundRule3FromPort:              ''
        InboundRule3CidrIp:                ''
        InboundRule4FromPort:              ''
        InboundRule4FromPort:              ''
        InboundRule4CidrIp:                ''

  BackEndALB:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL:
        'Fn::Sub':
          - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}/templates/services/security-group.yaml
      Parameters:
          Name: !Sub
            - ${StackName}-BackEndALB
            - StackName: !Ref AWS::StackName
          CreateApplicationLoadBalancer:   true
          LoadBalancerName:                Dev_BackEnd_ALB
          LoadBalancerType:                application
          Scheme:                          internal
          LoadBalancerSecurityGroup:       !Ref BackEndALBSecurityGroup
          ProjectName:                     !Ref ProjectName
          CreateALBTargetGroup1:           true
          ALBTargetGroupName1:             backend
          ALBTargetGroup1Port:             80
          CreateALBListenerRule1:          true
          ALBListenerRule1path:            '/core'
          CreateALBTargetGroup2:           false
          ALBTargetGroupName2:             ''
          ALBTargetGroup2Port:             ''
          CreateALBListenerRule2:          ''
          ALBListenerRule2path:            ''
          CreateALBTargetGroup3:           false
          ALBTargetGroupName3:             ''
          ALBTargetGroup3Port:             ''
          CreateALBListenerRule3:          ''
          ALBListenerRule3path:            ''
          ALBProtocol:                     HTTP
          VpcId:                           !Ref VpcId
          LoadBalancerSecurityGroup:       !Ref BackEndALBSecurityGroup
          ALBTG1HealthCheckPath:           '/'
          ALBTG2HealthCheckPath:           ''
          ALBTG3HealthCheckPath:           ''
          HealthCheckProtocol:             HTTP
          HealthCheckPort:                 traffic-port
          HealthyThresholdCount:           2
          UnhealthyThresholdCount:         3
          HealthCheckTimeoutSeconds:       60
          HealthCheckIntervalSeconds:      180
          Matcher:                         200
          SubnetId:
              'Fn::Join':
                - ','
                - Ref: AppSubnetId
